panel.grid.minor=element_line(linetype='blank')
)
library(ggplot2)
library(ggplot2)
df$Country<-factor(df$Country,levels=top_countries)
ggplot()+
geom_bar(data=df,aes(x=Country))+
theme(
panel.background=element_rect(fill = 'black'),
panel.grid.major=element_line(linetype='blank'),
panel.grid.minor=element_line(linetype='blank')
)
df<-hosts%>%
group_by(City)%>%
summarise(Count=n())%>%
arrange(desc(Count))
topcities<-df$City[2:21]
df<- hosts%>%
filter(City %in% topcities)
df$City<-factor(df$City,levels = topcities)
ggplot()+
geom_bar(data=df,aes(x=City),color='white',fill='yellow')+
theme(
panel.background=element_rect(fill='black'),
panel.grid.major=element_line(linetype = 'blank'),
panel.grid.minor=element_line(linetype = 'blank')
)
library(rgdal)
writeOGR(hostsp[rows,],'hosts.kml',layer=hosts,driver='KML')
library(RgoogleMaps)
library(ggmap)
hostsp<-hosts
library(sp)
hostsp$Latitude<-as.numeric(hostsp$Latitude)
hostsp$Longitude<-as.numeric(hostsp$Longitude)
coordinates(hostsp)<-~Longitude+Latitude
hostsp@data
head(hostsp@coords)
proj4string(hostsp)<-CRS('+proj=longlat +datum=WGS84')
plot(hostsp)
library(RgoogleMaps)
map<-MapBackground(lat=hostsp$Latitude[rows], lon=hostsp$Longitude[rows])
PlotOnStaticMap(map, lat=hostsp$Latitude[rows], lon=hostsp$Longitude[rows],pch=19,cex=.5)
rows<-which(hostsp$Latitude>=35 & hostsp$Latitude<=45 & hostsp$Longitude<=-70 & hostsp$Longitude>=-80)
#now we have to look up for countries who appeared most of the time suspecious
library(dplyr)
df<-hosts%>%
group_by(Country)%>%
summarise(count=n())%>%
arrange(desc(count))
top_countries<-df$Country[1:20]
df<-hosts%>%
filter(Country %in% top_countries )
df
df<-hosts%>%
group_by(City)%>%
summarise(Count=n())%>%
arrange(desc(Count))
topcities<-df$City[2:21]
df<- hosts%>%
filter(City %in% topcities)
df$City<-factor(df$City,levels = topcities)
ggplot()+
geom_bar(data=df,aes(x=City),color='white',fill='yellow')+
theme(
panel.background=element_rect(fill='black'),
panel.grid.major=element_line(linetype = 'blank'),
panel.grid.minor=element_line(linetype = 'blank')
)
library(sp)
library(RgoogleMaps)
library(rgdal)
library(ggmap)
writeOGR(state[rows,],'state.txt',layer=hosts,driver='txt')
?driver
read.table('state.txt',header = FALSE)
state<-read.table('state.txt',header = FALSE)
statesp<-state
statesp
writeOGR(statesp[rows,],'state.kml',layer=hosts,driver='kml')
writeOGR(statesp[rows,],'state.kml',layer=hosts,driver='KML')
statesp<-read.table('state.txt',header = FALSE)
writeOGR(statesp[rows,],'state.kml',layer=hosts,driver='KML')
writeOGR(statesp[,col],'state.kml',layer=hosts,driver='KML')
writeOGR(statesp[,column],'state.kml',layer=hosts,driver='KML')
writeOGR(statesp[],'state.kml',layer=hosts,driver='KML')
writeOGR(statesp(row),'state.kml',layer=hosts,driver='KML')
state<-read.table('state.txt',header = FALSE)
geocode<-('united states')
geocode
geocode('united states')
polygon<-function(country){
kml<-'<?xml version="1.0" encoding="UTF-8"?>
<kml xmlns="http://www.opengis.net/kml/2.2">
<Placemark>
<name>states</name>
<Polygon>
<extrude>1</extrude>
<altitudeMode>relativeToGround</altitudeMode>
<outerBoundaryIs>
<LinearRing>
<coordinates>
-77.05788457660967,38.87253259892824,10000
-77.05465973756702,38.87291016281703,10000
-77.05315536854791,38.87053267794386,10000
-77.05552622493516,38.868757801256,10000
-77.05844056290393,38.86996206506943,10000
-77.05788457660967,38.87253259892824,10000
</coordinates>
</LinearRing>
</outerBoundaryIs>
</Polygon>
</Placemark>
</kml>'
cat(kml, file='statedsfsd.kml')
}
polygon('france')
polygon<-function(country){
start<-'<?xml version="1.0" encoding="UTF-8"?>
<kml xmlns="http://www.opengis.net/kml/2.2">
<Placemark>\n'
name<-'<name>states</name>\n'
middle<-       '<Polygon>
<extrude>1</extrude>
<altitudeMode>relativeToGround</altitudeMode>
<outerBoundaryIs>
<LinearRing>\n'
coordinates<-          '<coordinates>
-77.05788457660967,38.87253259892824,10000
-77.05465973756702,38.87291016281703,10000
-77.05315536854791,38.87053267794386,10000
-77.05552622493516,38.868757801256,10000
-77.05844056290393,38.86996206506943,10000
-77.05788457660967,38.87253259892824,10000
</coordinates>\n'
end<-        '</LinearRing>
</outerBoundaryIs>
</Polygon>
</Placemark>
</kml>'
kml<- paste(start,name,middle,coordinates,end)
cat(kml, file='statedsfsd.kml')
}
polygon<-function(country){
start<-'<?xml version="1.0" encoding="UTF-8"?>
<kml xmlns="http://www.opengis.net/kml/2.2">
<Placemark>\n'
name<-'<name>states</name>\n'
middle<-       '<Polygon>
<extrude>1</extrude>
<altitudeMode>relativeToGround</altitudeMode>
<outerBoundaryIs>
<LinearRing>\n'
coordinates<-          '<coordinates>
-77.05788457660967,38.87253259892824,10000
-77.05465973756702,38.87291016281703,10000
-77.05315536854791,38.87053267794386,10000
-77.05552622493516,38.868757801256,10000
-77.05844056290393,38.86996206506943,10000
-77.05788457660967,38.87253259892824,10000
</coordinates>\n'
end<-        '</LinearRing>
</outerBoundaryIs>
</Polygon>
</Placemark>
</kml>'
kml<- paste(start,name,middle,coordinates,end)
cat(kml)
}
polygon(a)
polygon<-function(states){
start<-'<?xml version="1.0" encoding="UTF-8"?>
<kml xmlns="http://www.opengis.net/kml/2.2">
<Placemark>\n'
name<-paste('  <name>',states,'</name>\n')
middle<-       '<Polygon>
<extrude>1</extrude>
<altitudeMode>relativeToGround</altitudeMode>
<outerBoundaryIs>
<LinearRing>\n'
coordinates<-          '<coordinates>
-77.05788457660967,38.87253259892824,10000
-77.05465973756702,38.87291016281703,10000
-77.05315536854791,38.87053267794386,10000
-77.05552622493516,38.868757801256,10000
-77.05844056290393,38.86996206506943,10000
-77.05788457660967,38.87253259892824,10000
</coordinates>\n'
end<-        '</LinearRing>
</outerBoundaryIs>
</Polygon>
</Placemark>
</kml>'
kml<- paste(start,name,middle,coordinates,end)
cat(kml)
}
polygon(newyork)
polygon<-function(states){
start<-'<?xml version="1.0" encoding="UTF-8"?>
<kml xmlns="http://www.opengis.net/kml/2.2">
<Placemark>\n'
name<-paste('<name>',states,'</name>\n')
middle<-       '<Polygon>
<extrude>1</extrude>
<altitudeMode>relativeToGround</altitudeMode>
<outerBoundaryIs>
<LinearRing>\n'
coordinates<-          '<coordinates>
-77.05788457660967,38.87253259892824,10000
-77.05465973756702,38.87291016281703,10000
-77.05315536854791,38.87053267794386,10000
-77.05552622493516,38.868757801256,10000
-77.05844056290393,38.86996206506943,10000
-77.05788457660967,38.87253259892824,10000
</coordinates>\n'
end<-        '</LinearRing>
</outerBoundaryIs>
</Polygon>
</Placemark>
</kml>'
kml<- paste(start,name,middle,coordinates,end)
cat(kml)
}
polygon('ny')
polygon<-function(states){
coords<-geocode(states)
corner1<-paste(coords$lon,coords$lat,10000,sep=',')
corner2<-paste(coords$lon,coords$lat,10000,sep=',')
corner3<-paste(coords$lon,coords$lat,10000,sep=',')
corner4<-paste(coords$lon,coords$lat,10000,sep=',')
start<-'<?xml version="1.0" encoding="UTF-8"?>
<kml xmlns="http://www.opengis.net/kml/2.2">
<Placemark>\n'
name<-paste('<name>',states,'</name>\n')
middle<-       '<Polygon>
<extrude>1</extrude>
<altitudeMode>relativeToGround</altitudeMode>
<outerBoundaryIs>
<LinearRing>\n'
coordinates<-    paste('<coordinates>',
corner1,
corner2,
corner3,
corner4,
corner1,
'</coordinates>\n')
end<-        '</LinearRing>
</outerBoundaryIs>
</Polygon>
</Placemark>
</kml>'
kml<- paste(start,name,middle,coordinates,end)
cat(kml)
}
polygon('ny')
polygon<-function(states){
coords<-geocode(states)
corner1<-paste(coords$lon+1,coords$lat+1,10000,sep=',') #++
corner2<-paste(coords$lon-1,coords$lat+1,10000,sep=',') #-+
corner3<-paste(coords$lon-1,coords$lat-1,10000,sep=',') #--
corner4<-paste(coords$lon+1,coords$lat-1,10000,sep=',') #+-
start<-'<?xml version="1.0" encoding="UTF-8"?>
<kml xmlns="http://www.opengis.net/kml/2.2">
<Placemark>\n'
name<-paste('<name>',states,'</name>\n')
middle<-       '<Polygon>
<extrude>1</extrude>
<altitudeMode>relativeToGround</altitudeMode>
<outerBoundaryIs>
<LinearRing>\n'
coordinates<-    paste('<coordinates>',
corner1,
corner2,
corner3,
corner4,
corner1,
'</coordinates>\n')
end<-        '</LinearRing>
</outerBoundaryIs>
</Polygon>
</Placemark>
</kml>'
kml<- paste(start,name,middle,coordinates,end)
cat(kml)
}
polygon('France')
polygon('France')
polygon<-function(states){
coords<-geocode(states)
corner1<-paste(coords$lon+1,coords$lat+1,10000,sep=',') #++
corner2<-paste(coords$lon-1,coords$lat+1,10000,sep=',') #-+
corner3<-paste(coords$lon-1,coords$lat-1,10000,sep=',') #--
corner4<-paste(coords$lon+1,coords$lat-1,10000,sep=',') #+-
start<-'<?xml version="1.0" encoding="UTF-8"?>
<kml xmlns="http://www.opengis.net/kml/2.2">
<Placemark>\n'
name<-paste('<name>',states,'</name>\n')
middle<-       '<Polygon>
<extrude>1</extrude>
<altitudeMode>relativeToGround</altitudeMode>
<outerBoundaryIs>
<LinearRing>\n'
coordinates<-    paste('<coordinates>',
corner1,
corner2,
corner3,
corner4,
corner1,
'</coordinates>\n')
end<-        '</LinearRing>
</outerBoundaryIs>
</Polygon>
</Placemark>
</kml>'
kml<- paste(start,name,middle,coordinates,end)
cat(kml,file='polygon.kml')
}
polygon('France')
polygon('India')
state<-read.table('state.txt',header = FALSE)
head(state)
cat('<?xml version="1.0" encoding="UTF-8"?>
<kml xmlns="http://www.opengis.net/kml/2.2">',file='polygon.kml')
for(state in state){
polygon(state)
}
cat('</kml>',file='polygon.kml',append = TRUE)
setwd("E:/study/network analysis")
state<-read.table('state.txt',header = FALSE)
cat('<?xml version="1.0" encoding="UTF-8"?>
<kml xmlns="http://www.opengis.net/kml/2.2">',file='polygon.kml')
for(state in state){
polygon(state)
}
cat('</kml>',file='polygon.kml',append = TRUE)
state<-read.table('state.txt',header = FALSE)
statesp<-state
statesp
class(statesp)
df<-hosts%>%
group_by(City)%>%
summarise(Count=n())%>%
arrange(desc(Count))
topcities<-df$City[2:21]
hosts<- read.csv('reputation.data', stringsAsFactors = FALSE, header = FALSE, sep= '#')
df<-hosts%>%
group_by(City)%>%
summarise(Count=n())%>%
arrange(desc(Count))
topcities<-df$City[2:21]
hosts<- read.csv('reputation.data', stringsAsFactors = FALSE, header = FALSE, sep= '#')
head(hosts)
hosts$V2<-NULL
hosts$V3<-NULL
hosts$V4<-NULL
hosts$V8<-NULL
colnames(hosts)<-c('IP','Country','City','Coordinates')
library(stringr)
#now we need coordinates column as latitude and longitude
hosts$Latitude<-str_replace(hosts$Coordinates,'(.+),.+','\\1')
hosts$Longitude<-str_replace(hosts$Coordinates,'(.+),(.+)','\\2')
hosts$Coordinates<-NULL
df<-hosts%>%
group_by(City)%>%
summarise(Count=n())%>%
arrange(desc(Count))
topcities<-df$City[2:21]
class(topcities)
state<-read.table('state.txt',header = FALSE)
statesp<-state
class(statesp)
as.character(statesp)
statesp
class(statesp)
statesp<-as.character('state')
head(statesp)
state<-read.table('state.txt',header = FALSE)
statesp<-as.character(state)
head(statesp)
state<-read.table('state.txt',header = FALSE)
statesp<-state[1:100]
statesp<-state[0:100]
statesp<-state[0:99]
state<-scan('state.txt',what=character(),sep='\n')
latlog<-geocode('state')
head(latlog)
latlog<-geocode(state)
head(latlog)
class(latlog$lon)
proj4string(latlog)<-CRS('+proj=longlat +datum=WGS84')
class(latlog)
library(sp)
library(RgoogleMaps)
library(rgdal)
library(ggmap)
proj4string(latlog)<-CRS('+proj=longlat +datum=WGS84')
library(sp)
hostsp<-hosts
library(sp)
hostsp$Latitude<-as.numeric(hostsp$Latitude)
hostsp$Longitude<-as.numeric(hostsp$Longitude)
coordinates(hostsp)<-~Longitude+Latitude
hostsp@data
head(hostsp@coords)
proj4string(hostsp)<-CRS('+proj=longlat +datum=WGS84')
plot(hostsp)
library(RgoogleMaps)
map<-MapBackground(lat=hostsp$Latitude[rows], lon=hostsp$Longitude[rows])
PlotOnStaticMap(map, lat=hostsp$Latitude[rows], lon=hostsp$Longitude[rows],pch=19,cex=.5)
rows<-which(hostsp$Latitude>=35 & hostsp$Latitude<=45 & hostsp$Longitude<=-70 & hostsp$Longitude>=-80)
library(rgdal)
writeOGR(hostsp[rows,],'hosts.kml',layer=hosts,driver='KML')
plot(latlog)
exit
proj4string(latlog)<-CRS('+proj=longlat +datum=WGS84')
class(latlog)
latlog$lon<-as.numeric(latlog$lon)
latlog$lat<-as.numeric(latlog$lat)
class(latlog)
coordinates(latlog) <- c("x", "y")
coordinates(latlog) <- c(latlog$lon, latlog$lat)
coordinates(latlog) <- c(latlog$lat,latlog$lon)
coordinates(latlog)<-~latlog$lon+latlog$lat
coordinates(latlog)<-~lon+lat
proj4string(latlog)<-CRS('+proj=longlat +datum=WGS84')
plot(latlog)
library(RgoogleMaps)
map<-MapBackground(lat=latlog$lat , lon=latlog$Lon)
head(latlog)
map<-MapBackground(lat=latlog$lat , lon=latlog$lon)
map
PlotOnStaticMap(map,lat=latlog$lat,lon=latlog$lon ,pch=19,cex=.5)
rows<-which(hostsp$Latitude>=35 & hostsp$Latitude<=45 & hostsp$Longitude<=-70 & hostsp$Longitude>=-80)
rows<-which(latlog$Lat>=35 & latlog$Lat<=45 & latlog$Lon<=-70 & latlog$Lon>=-80)
head(latlog)
rows<-which(latlog$lat>=35 & latlog$lat<=45 & latlog$lon<=-70 & latlog$lon>=-80)
map<-MapBackground(lat=latlog$lat[rows] , lon=latlog$lon[rows])
PlotOnStaticMap(map,lat=latlog$lat[rows],lon=latlog$lon[rows] ,pch=19,cex=.5)
rows<-which(latlog$lat>=35 & latlog$lat<=45 )
map<-MapBackground(lat=latlog$lat[rows] , lon=latlog$lon[rows])
PlotOnStaticMap(map,lat=latlog$lat[rows],lon=latlog$lon[rows] ,pch=19,cex=.5)
rows<-which(latlog$lat>=25 & latlog$lat<=50 & latlog$lon<=-70 & latlog$lon>=-120)
map<-MapBackground(lat=latlog$lat[rows] , lon=latlog$lon[rows])
PlotOnStaticMap(map,lat=latlog$lat[rows],lon=latlog$lon[rows] ,pch=19,cex=.5)
rows<-which(latlog$lat>=25 & latlog$lat<=50 & latlog$lon<=-70 & latlog$lon>=-150)
map<-MapBackground(lat=latlog$lat[rows] , lon=latlog$lon[rows])
PlotOnStaticMap(map,lat=latlog$lat[rows],lon=latlog$lon[rows] ,pch=19,cex=.5)
state<-scan('state.txt',what=character(),sep='\n')
latlog<-geocode(state)
coordinates(latlog)<-~lon+lat
proj4string(latlog)<-CRS('+proj=longlat +datum=WGS84')
rows<-which(latlog$lat>=25 & latlog$lat<=60 & latlog$lon<=-70 & latlog$lon>=-150)
map<-MapBackground(lat=latlog$lat[rows] , lon=latlog$lon[rows])
PlotOnStaticMap(map,lat=latlog$lat[rows],lon=latlog$lon[rows] ,pch=19,cex=.5)
rows<-which(latlog$lat>=25 & latlog$lat<=60 & latlog$lon<=-30 & latlog$lon>=-150)
map<-MapBackground(lat=latlog$lat[rows] , lon=latlog$lon[rows])
PlotOnStaticMap(map,lat=latlog$lat[rows],lon=latlog$lon[rows] ,pch=19,cex=.5)
rows<-which(latlog$lat>=25 & latlog$lat<=60 & latlog$lon<=-30 & latlog$lon>=-150)
map<-MapBackground(lat=latlog$lat[rows] , lon=latlog$lon[rows])
PlotOnStaticMap(map,lat=latlog$lat[rows],lon=latlog$lon[rows] ,pch=19,cex=.5)
rows<-which(latlog$lat>=25 & latlog$lat<=80 & latlog$lon<=-30 & latlog$lon>=-150)
map<-MapBackground(lat=latlog$lat[rows] , lon=latlog$lon[rows])
PlotOnStaticMap(map,lat=latlog$lat[rows],lon=latlog$lon[rows] ,pch=19,cex=.5)
rows<-which(latlog$lat>=25 & latlog$lat<=70 & latlog$lon<=-30 & latlog$lon>=-150)
map<-MapBackground(lat=latlog$lat[rows] , lon=latlog$lon[rows])
PlotOnStaticMap(map,lat=latlog$lat[rows],lon=latlog$lon[rows] ,pch=19,cex=.5)
rows<-which(latlog$lat>=25 & latlog$lat<=65 & latlog$lon<=-30 & latlog$lon>=-120)
map<-MapBackground(lat=latlog$lat[rows] , lon=latlog$lon[rows])
PlotOnStaticMap(map,lat=latlog$lat[rows],lon=latlog$lon[rows] ,pch=19,cex=.5)
rows<-which(latlog$lat>=25 & latlog$lat<=65 & latlog$lon<=-30 & latlog$lon>=-150)
map<-MapBackground(lat=latlog$lat[rows] , lon=latlog$lon[rows])
PlotOnStaticMap(map,lat=latlog$lat[rows],lon=latlog$lon[rows] ,pch=19,cex=.5)
rows<-which(latlog$lat>=25 & latlog$lat<=65 & latlog$lon<=-30 & latlog$lon>=-140)
map<-MapBackground(lat=latlog$lat[rows] , lon=latlog$lon[rows])
PlotOnStaticMap(map,lat=latlog$lat[rows],lon=latlog$lon[rows] ,pch=19,cex=.5)
rows<-which(latlog$lat>=25 & latlog$lat<=50 & latlog$lon<=-30 & latlog$lon>=-150)
map<-MapBackground(lat=latlog$lat[rows] , lon=latlog$lon[rows])
PlotOnStaticMap(map,lat=latlog$lat[rows],lon=latlog$lon[rows] ,pch=19,cex=.5)
rows<-which(latlog$lat>=25 & latlog$lat<=65 & latlog$lon<=-30 & latlog$lon>=-150)
map<-MapBackground(lat=latlog$lat[rows] , lon=latlog$lon[rows])
PlotOnStaticMap(map,lat=latlog$lat[rows],lon=latlog$lon[rows] ,pch=19,cex=.5)
latlog$lon<-latlog$lon+runif(100,-1,1)
latlog$lon+runif(100,-1,1)
latlog$longitude<-latlog$lon+runif(100,-1,1)
latlog$latitude<-latlog$lat+runif(100,-1,1)
coordinates(latlog)<-~longitude+latitude
head(latlog)
state<-scan('state.txt',what=character(),sep='\n')
latlog<-geocode(state)
latlog$longitude<-latlog$lon+runif(100,-1,1)
latlog$latitude<-latlog$lat+runif(100,-1,1)
coordinates(latlog)<-~longitude+latitude
proj4string(latlog)<-CRS('+proj=longlat +datum=WGS84')
rows<-which(latlog$lat>=25 & latlog$lat<=65 & latlog$lon<=-30 & latlog$lon>=-150)
map<-MapBackground(lat=latlog$lat[rows] , lon=latlog$lon[rows])
PlotOnStaticMap(map,lat=latlog$lat[rows],lon=latlog$lon[rows] ,pch=19,cex=.5)
coordinates(latlog)<-~longitude+latitude
proj4string(latlog)<-CRS('+proj=longlat +datum=WGS84')
rows<-which(latlog$lat>=25 & latlog$lat<=65 & latlog$lon<=-30 & latlog$lon>=-150)
map<-MapBackground(lat=latlog$lat[rows] , lon=latlog$lon[rows])
PlotOnStaticMap(map,lat=latlog$lat[rows],lon=latlog$lon[rows] ,pch=19,cex=.5)
rows<-which(latlog$latitude>=25 & latlog$latitude<=65 & latlog$longitude<=-30 & latlog$longitude>=-150)
map<-MapBackground(lat=latlog$latitude[rows] , lon=latlog$longitude[rows])
PlotOnStaticMap(map,lat=latlog$latitude[rows],lon=latlog$longitude[rows] ,pch=19,cex=.5)
rows<-which(latlog$latitude>=25 & latlog$latitude<=80 & latlog$longitude<=-30 & latlog$longitude>=-150)
map<-MapBackground(lat=latlog$latitude[rows] , lon=latlog$longitude[rows])
PlotOnStaticMap(map,lat=latlog$latitude[rows],lon=latlog$longitude[rows] ,pch=19,cex=.5)
map<-MapBackground(lat=latlog$latitude[rows] , lon=latlog$longitude[rows])
PlotOnStaticMap(map,lat=latlog$latitude[rows],lon=latlog$longitude[rows] ,pch=19,cex=.5)
rows<-which(latlog$latitude>=20 & latlog$latitude<=80 & latlog$longitude<=-30 & latlog$longitude>=-160)
map<-MapBackground(lat=latlog$latitude[rows] , lon=latlog$longitude[rows])
PlotOnStaticMap(map,lat=latlog$latitude[rows],lon=latlog$longitude[rows] ,pch=19,cex=.5)
